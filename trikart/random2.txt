import React, { useState } from "react";
import useSWR from "swr";
import {
  Container,
  Row,
  Col,
  Card,
  Spinner,
  Alert,
  Pagination,
  Form,
  DropdownButton,
  Dropdown,
  Button,
} from "react-bootstrap";
import { useSearchParams } from "react-router-dom";
import ReactSlider from "react-slider";

// Define available indices with their credentials
const INDICES = [
  {
    name: "qa-en",
    clientId: "7645129791",
    secretKey: "Qfj1UUkFItWfVFwWpJ65g0VfhjdVGN",
  },
];

// CustomSlider component (unchanged)
const CustomSlider = ({ min, max, value, onChange, minDistance }) => {
  return (
    <ReactSlider
      min={min}
      max={max}
      value={value}
      onChange={onChange}
      pearling
      minDistance={minDistance}
      renderTrack={(props, state) => {
        const { key, ...restProps } = props;
        return (
          <div
            key={`track-${state.index}`}
            {...restProps}
            style={{
              ...restProps.style,
              height: "8px",
              background: state.index === 1 ? "#007bff" : "#ddd",
              borderRadius: "4px",
            }}
          />
        );
      }}
      renderThumb={(props, state) => {
        const { key, ...restProps } = props;
        return (
          <div
            key={`thumb-${state.index}`}
            {...restProps}
            style={{
              ...restProps.style,
              height: "20px",
              width: "20px",
              backgroundColor: "#007bff",
              borderRadius: "50%",
              cursor: "grab",
              top: "-6px",
            }}
          />
        );
      }}
    />
  );
};

// Fetcher function (unchanged)
const fetcher = async ([url, query, page, filters, selectedIndex]) => {
  const indexConfig = INDICES.find((index) => index.name === selectedIndex) || INDICES[0];
  try {
    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Client-id": indexConfig.clientId,
        "Secret-key": indexConfig.secretKey,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        search: query,
        size: 9,
        page: page,
        page_size: 28,
        filter: {
          category:
            filters.categories.length > 0 ? filters.categories : undefined,
          price: filters.priceRange,
          brand: filters.brands.length > 0 ? filters.brands : undefined,
        },
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || "Failed to fetch data");
    }

    return response.json();
  } catch (error) {
    console.error("Fetch error:", error);
    throw error;
  }
};

// Main SearchPage component
const SearchPage = () => {
  const [searchParams, setSearchParams] = useSearchParams();
  const query = searchParams.get("q") || "";
  const page = parseInt(searchParams.get("page")) || 1;
  const brands = searchParams.get("brands")?.split(",") || [];
  const categories = searchParams.get("categories")?.split(",") || [];
  const selectedIndex = searchParams.get("index") || INDICES[0].name;
  const [sortOption, setSortOption] = useState("None");

  // Define priceMin and priceMax with initial fallbacks
  const priceMin = parseInt(searchParams.get("priceMin")) || 0;
  const priceMax = parseInt(searchParams.get("priceMax")) || 10000;

  // Define filters before useSWR
  const filters = {
    brands,
    categories,
    priceRange: [priceMin, priceMax],
  };

  const { data, error, isLoading } = useSWR(
    query
      ? [
          "https://uat.search-assist.webc.in/api/search",
          query,
          page,
          filters,
          selectedIndex,
        ]
      : null,
    fetcher,
    { revalidateOnFocus: false }
  );

  const rawItems = data?.items || [];
  const totalPages = Math.ceil((data?.total || 0) / 28);
  const availableProducts = data?.total;

  const filterList = data?.filter_list || [];
  const priceFilter = filterList.find((f) => f.label === "Price")?.options || {
    min_price: 0,
    max_price: 10000,
  };
  const brandFilter =
    filterList.find((f) => f.label === "Brand")?.options || [];
  const categoryFilter =
    filterList.find((f) => f.label === "Category")?.options || [];

  const minPrice = priceFilter.min_price;
  const maxPrice = priceFilter.max_price;
  const availableBrands = brandFilter.map((option) => option.name);
  const availableCategories = categoryFilter.map((option) => option.name);

  // Frontend sorting logic (unchanged)
  const sortedItems = [...rawItems].sort((a, b) => {
    const priceA =
      a.discount_percentage > 0 && a.sale_price
        ? parseFloat(a.sale_price.trim())
        : parseFloat(a.price.trim());
    const priceB =
      b.discount_percentage > 0 && b.sale_price
        ? parseFloat(b.sale_price.trim())
        : parseFloat(b.price.trim());

    switch (sortOption) {
      case "Price: High to Low":
        return priceB - priceA;
      case "Price: Low to High":
        return priceA - priceB;
      default:
        return 0;
    }
  });

  // Handle pagination (unchanged)
  const handlePageChange = (newPage) => {
    if (newPage >= 1 && newPage <= totalPages) {
      const newParams = new URLSearchParams(searchParams);
      newParams.set("page", newPage.toString());
      setSearchParams(newParams, { replace: true });
    }
  };

  // Handle filter changes (unchanged)
  const handleFilterChange = (type, value) => {
    const newParams = new URLSearchParams(searchParams);

    if (type === "brands" || type === "categories") {
      const currentValues = type === "brands" ? brands : categories;
      const updatedValues = currentValues.includes(value)
        ? currentValues.filter((item) => item !== value)
        : [...currentValues, value];
      if (updatedValues.length > 0) {
        newParams.set(type, updatedValues.join(","));
      } else {
        newParams.delete(type);
      }
    } else if (type === "priceRange") {
      newParams.set("priceMin", value[0].toString());
      newParams.set("priceMax", value[1].toString());
    }

    newParams.set("page", "1");
    setSearchParams(newParams, { replace: true });
  };

  // Handle sort selection (unchanged)
  const handleSortSelect = (eventKey) => {
    setSortOption(eventKey);
  };

  // Handle index selection (unchanged)
  const handleIndexSelect = (eventKey) => {
    const newParams = new URLSearchParams(searchParams);
    newParams.set("index", eventKey);
    newParams.set("page", "1");
    setSearchParams(newParams, { replace: true });
  };

  // Handle clear all filters (unchanged)
  const handleClearFilters = () => {
    const newParams = new URLSearchParams(searchParams);
    newParams.delete("brands");
    newParams.delete("categories");
    newParams.set("priceMin", minPrice.toString());
    newParams.set("priceMax", maxPrice.toString());
    newParams.set("page", "1");
    setSearchParams(newParams, { replace: true });
  };

  return (
    <Container className="mt-4">
      <Row>
        {/* Left Side - Search Results */}
        <Col md={8}>
          <h1 className="text-center mb-4">Search Results for: {query}</h1>
          <p>
            Showing results for <strong>{availableProducts}</strong> products
            found
          </p>
          {isLoading && (
            <div className="text-center">
              <Spinner animation="border" variant="primary" />
            </div>
          )}

          {error && (
            <Alert variant="danger">
              <Alert.Heading>Oops!</Alert.Heading>
              <p>{error.message}</p>
            </Alert>
          )}

          {!isLoading && !error && (
            <>
              <Row xs={1} md={3} className="g-4 mb-4">
                {sortedItems.length > 0 ? (
                  sortedItems.map((item) => (
                    <Col key={item.id}>
                      <Card
                        className="h-100"
                        style={{
                          opacity: item.in_stock ? 1 : 0.6, // Grey out if out of stock
                        }}
                      >
                        <Card.Img
                          variant="top"
                          src={item.image_link}
                          alt={item.title}
                          className="img-fluid rounded"
                        />
                        <Card.Body>
                          <Card.Title>{item.title}</Card.Title>
                          <Card.Text className="fw-bold">
                            {item.discount_percentage > 0 && item.sale_price ? (
                              <>
                                <span
                                  style={{
                                    textDecoration: "line-through",
                                    color: "grey",
                                  }}
                                >
                                  ₹{item.price.trim()}
                                </span>{" "}
                                <span style={{ color: "red" }}>
                                  ₹{item.sale_price.trim()}
                                </span>
                              </>
                            ) : (
                              <span>₹{item.price.trim()}</span>
                            )}
                          </Card.Text>
                          {!item.in_stock && (
                            <Card.Text
                              className="text-danger fw-bold"
                              style={{ marginTop: "10px" }}
                            >
                              Sold Out
                            </Card.Text>
                          )}
                        </Card.Body>
                      </Card>
                    </Col>
                  ))
                ) : (
                  <Col className="text-center">
                    <p className="lead">Results not found</p>
                  </Col>
                )}
              </Row>

              {totalPages > 1 && (
                <div className="d-flex justify-content-center">
                  <Pagination>
                    <Pagination.Prev
                      onClick={() => handlePageChange(page - 1)}
                      disabled={page === 1}
                    />
                    {Array.from({ length: totalPages }, (_, index) => (
                      <Pagination.Item
                        key={index + 1}
                        active={index + 1 === page}
                        onClick={() => handlePageChange(index + 1)}
                      >
                        {index + 1}
                      </Pagination.Item>
                    ))}
                    <Pagination.Next
                      onClick={() => handlePageChange(page + 1)}
                      disabled={page === totalPages}
                    />
                  </Pagination>
                </div>
              )}
            </>
          )}
        </Col>

        {/* Right Side - Filter Options */}
        <Col md={4}>
          <h3>Select Index:</h3>
          <DropdownButton
            title={selectedIndex}
            onSelect={handleIndexSelect}
            className="mb-2"
          >
            {INDICES.map((index) => (
              <Dropdown.Item key={index.name} eventKey={index.name}>
                {index.name}
              </Dropdown.Item>
            ))}
          </DropdownButton>

          <h3>Sort by:</h3>
          <DropdownButton
            title={sortOption}
            onSelect={handleSortSelect}
            className="mb-2"
          >
            <Dropdown.Item eventKey="None">None</Dropdown.Item>
            <Dropdown.Item eventKey="Price: High to Low">
              Price: High to Low
            </Dropdown.Item>
            <Dropdown.Item eventKey="Price: Low to High">
              Price: Low to High
            </Dropdown.Item>
          </DropdownButton>

          <h4>Filters</h4>

          {/* Clear Filters Button */}
          <Button
            variant="outline-danger"
            onClick={handleClearFilters}
            className="mb-3"
          >
            Clear All Filters
          </Button>

          {/* Brand Filter */}
          {availableBrands.length > 0 && (
            <>
              <h6 className="mt-3">Brand</h6>
              <Form>
                {availableBrands.map((brand) => (
                  <Form.Check
                    key={brand}
                    type="checkbox"
                    label={brand}
                    checked={filters.brands.includes(brand)}
                    onChange={() => handleFilterChange("brands", brand)}
                  />
                ))}
              </Form>
            </>
          )}

          {/* Category Filter */}
          {availableCategories.length > 0 && (
            <>
              <h6 className="mt-3">Category</h6>
              <Form>
                {availableCategories.map((category) => (
                  <Form.Check
                    key={category}
                    type="checkbox"
                    label={category}
                    checked={filters.categories.includes(category)}
                    onChange={() => handleFilterChange("categories", category)}
                  />
                ))}
              </Form>
            </>
          )}

          {/* Price Filter with CustomSlider */}
          {minPrice !== undefined && maxPrice !== undefined && (
            <>
              <h6 className="mt-3">Price Range</h6>
              <div className="mb-3">
                <div style={{ marginBottom: "10px" }}>
                  {filters.priceRange[0]} - {filters.priceRange[1]}
                </div>
                <CustomSlider
                  min={minPrice}
                  max={maxPrice}
                  value={filters.priceRange}
                  onChange={(value) => handleFilterChange("priceRange", value)}
                  minDistance={10}
                />
              </div>
            </>
          )}
        </Col>
      </Row>
    </Container>
  );
};

export default SearchPage;